#!/bin/bash
#
# ARG_OPTIONAL_SINGLE([output],[o],[output ISO file to write],[custom.iso])
# ARG_POSITIONAL_SINGLE([isofile],[The iso file to modify])
# ARG_POSITIONAL_SINGLE([overlay],[The directory to overlay over the iso file])
# ARG_HELP([This script will create a new iso file based on the provided isofile with an overlay based on the directory overlay.])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='oh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_output="custom.iso"


print_help()
{
	printf '%s\n' "This script will create a new iso file based on the provided isofile with an overlay based on the directory overlay."
	printf 'Usage: %s [-o|--output <arg>] [-h|--help] <isofile> <overlay>\n' "$0"
	printf '\t%s\n' "<isofile>: The iso file to modify"
	printf '\t%s\n' "<overlay>: The directory to overlay over the iso file"
	printf '\t%s\n' "-o, --output: output ISO file to write (default: 'custom.iso')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-o|--output)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_output="$2"
				shift
				;;
			--output=*)
				_arg_output="${_key##--output=}"
				;;
			-o*)
				_arg_output="${_key##-o}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'isofile' and 'overlay'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_isofile _arg_overlay "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -e
cleanup() {
    echo "Cleaning up."
    set +e
    if [ -n "$merged" ]; then
        (sudo umount $merged && rm -rf $merged $workdir) || \
        (rmdir $merged && rm -rf $workdir)
    fi
    if [ -n "$iso" ]; then
        (sudo umount $iso && rm -rf $iso) || \
        rmdir $iso
    fi
    echo "All done"
}
trap cleanup EXIT HUP INT QUIT TERM

echo "Customizing $_arg_isofile with directory $_arg_overlay"

iso=$(mktemp -d -p. --suffix=-iso .tmp-XXXXXX)
workdir=$(mktemp -d -p. --suffix=-work .tmp-XXXXXX)
merged=$(mktemp -d -p. --suffix=-merged .tmp-XXXXXX)
sudo mount -o loop "$_arg_isofile" $iso
sudo mount -t overlay -o ro,lowerdir=$iso,upperdir="$_arg_overlay",workdir="$workdir" none $merged

xorriso_options=$(xorriso -hfsplus on -indev "$_arg_isofile" -report_el_torito as_mkisofs 2>/dev/null | tr [\\n] " ")

# eval makes the options in $xorriso_options get the correct quoting
# Seen in this https://unix.stackexchange.com/questions/444946/how-can-we-run-a-command-stored-in-a-variable/444949#444949
# right before the section "Better ways to do it"
eval xorrisofs ${xorriso_options} -o "${_arg_output:-custom.iso}" "${merged}"

# ] <-- needed because of Argbash
